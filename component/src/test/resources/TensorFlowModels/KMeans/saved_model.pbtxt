saved_model_schema_version: 1
meta_graphs {
  meta_info_def {
    stripped_op_list {
      op {
        name: "ArgMin"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dimension"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "output_type"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
        attr {
          name: "output_type"
          type: "type"
          default_value {
            type: DT_INT64
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Assign"
        input_arg {
          name: "ref"
          type_attr: "T"
          is_ref: true
        }
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output_ref"
          type_attr: "T"
          is_ref: true
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "validate_shape"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "use_locking"
          type: "bool"
          default_value {
            b: true
          }
        }
        allows_uninitialized_input: true
      }
      op {
        name: "ConcatV2"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        input_arg {
          name: "axis"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 2
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Const"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "value"
          type: "tensor"
        }
        attr {
          name: "dtype"
          type: "type"
        }
      }
      op {
        name: "Equal"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type: DT_BOOL
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_UINT8
              type: DT_INT8
              type: DT_INT16
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_QUINT8
              type: DT_QINT8
              type: DT_QINT32
              type: DT_STRING
              type: DT_BOOL
              type: DT_COMPLEX128
            }
          }
        }
        is_commutative: true
      }
      op {
        name: "ExpandDims"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "dim"
          type_attr: "Tdim"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tdim"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Gather"
        input_arg {
          name: "params"
          type_attr: "Tparams"
        }
        input_arg {
          name: "indices"
          type_attr: "Tindices"
        }
        output_arg {
          name: "output"
          type_attr: "Tparams"
        }
        attr {
          name: "validate_indices"
          type: "bool"
          default_value {
            b: true
          }
        }
        attr {
          name: "Tparams"
          type: "type"
        }
        attr {
          name: "Tindices"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Identity"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
      }
      op {
        name: "Mean"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "MergeV2Checkpoints"
        input_arg {
          name: "checkpoint_prefixes"
          type: DT_STRING
        }
        input_arg {
          name: "destination_prefix"
          type: DT_STRING
        }
        attr {
          name: "delete_old_dirs"
          type: "bool"
          default_value {
            b: true
          }
        }
        is_stateful: true
      }
      op {
        name: "NoOp"
      }
      op {
        name: "Pack"
        input_arg {
          name: "values"
          type_attr: "T"
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "axis"
          type: "int"
          default_value {
            i: 0
          }
        }
      }
      op {
        name: "Placeholder"
        output_arg {
          name: "output"
          type_attr: "dtype"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "shape"
          type: "shape"
          default_value {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      op {
        name: "RandomShuffle"
        input_arg {
          name: "value"
          type_attr: "T"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "seed"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "seed2"
          type: "int"
          default_value {
            i: 0
          }
        }
        attr {
          name: "T"
          type: "type"
        }
        is_stateful: true
      }
      op {
        name: "Reshape"
        input_arg {
          name: "tensor"
          type_attr: "T"
        }
        input_arg {
          name: "shape"
          type_attr: "Tshape"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Tshape"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "RestoreV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        output_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "SaveV2"
        input_arg {
          name: "prefix"
          type: DT_STRING
        }
        input_arg {
          name: "tensor_names"
          type: DT_STRING
        }
        input_arg {
          name: "shape_and_slices"
          type: DT_STRING
        }
        input_arg {
          name: "tensors"
          type_list_attr: "dtypes"
        }
        attr {
          name: "dtypes"
          type: "list(type)"
          has_minimum: true
          minimum: 1
        }
        is_stateful: true
      }
      op {
        name: "ShardedFilename"
        input_arg {
          name: "basename"
          type: DT_STRING
        }
        input_arg {
          name: "shard"
          type: DT_INT32
        }
        input_arg {
          name: "num_shards"
          type: DT_INT32
        }
        output_arg {
          name: "filename"
          type: DT_STRING
        }
      }
      op {
        name: "Slice"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "begin"
          type_attr: "Index"
        }
        input_arg {
          name: "size"
          type_attr: "Index"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
        }
        attr {
          name: "Index"
          type: "type"
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "Square"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        output_arg {
          name: "y"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "StringJoin"
        input_arg {
          name: "inputs"
          type: DT_STRING
          number_attr: "N"
        }
        output_arg {
          name: "output"
          type: DT_STRING
        }
        attr {
          name: "N"
          type: "int"
          has_minimum: true
          minimum: 1
        }
        attr {
          name: "separator"
          type: "string"
          default_value {
            s: ""
          }
        }
      }
      op {
        name: "Sub"
        input_arg {
          name: "x"
          type_attr: "T"
        }
        input_arg {
          name: "y"
          type_attr: "T"
        }
        output_arg {
          name: "z"
          type_attr: "T"
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_HALF
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT32
              type: DT_INT64
              type: DT_COMPLEX64
              type: DT_COMPLEX128
            }
          }
        }
      }
      op {
        name: "Sum"
        input_arg {
          name: "input"
          type_attr: "T"
        }
        input_arg {
          name: "reduction_indices"
          type_attr: "Tidx"
        }
        output_arg {
          name: "output"
          type_attr: "T"
        }
        attr {
          name: "keep_dims"
          type: "bool"
          default_value {
            b: false
          }
        }
        attr {
          name: "T"
          type: "type"
          allowed_values {
            list {
              type: DT_FLOAT
              type: DT_DOUBLE
              type: DT_INT64
              type: DT_INT32
              type: DT_UINT8
              type: DT_UINT16
              type: DT_INT16
              type: DT_INT8
              type: DT_COMPLEX64
              type: DT_COMPLEX128
              type: DT_QINT8
              type: DT_QUINT8
              type: DT_QINT32
              type: DT_HALF
            }
          }
        }
        attr {
          name: "Tidx"
          type: "type"
          default_value {
            type: DT_INT32
          }
          allowed_values {
            list {
              type: DT_INT32
              type: DT_INT64
            }
          }
        }
      }
      op {
        name: "VariableV2"
        output_arg {
          name: "ref"
          type_attr: "dtype"
          is_ref: true
        }
        attr {
          name: "shape"
          type: "shape"
        }
        attr {
          name: "dtype"
          type: "type"
        }
        attr {
          name: "container"
          type: "string"
          default_value {
            s: ""
          }
        }
        attr {
          name: "shared_name"
          type: "string"
          default_value {
            s: ""
          }
        }
        is_stateful: true
      }
      op {
        name: "Where"
        input_arg {
          name: "input"
          type: DT_BOOL
        }
        output_arg {
          name: "index"
          type: DT_INT64
        }
      }
    }
    tags: "serve"
    tensorflow_version: "1.3.0"
    tensorflow_git_version: "v1.3.0-rc2-20-g0787eee"
  }
  graph_def {
    node {
      name: "Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_FLOAT
            tensor_shape {
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
            tensor_content: "g\232h\276o=\331?(\001!@em\307?&\352\003\276\221x\203>\227\210}>\351\373\210?r\241\235?\030hr>\350\364\t@I\207\202?e\366|?\244\017\346?e\262\t@\351\031\266?S\n\375>[\023(\276\223\254\360?>/\334?\267 \033@\270!\201?\233m2>\034: >\322%\337=\363\026\212>\331\032\037@\003z\210?OI9@\347\215\271?t\253\025@\374\315\036>.i2?\363\305i\277\245\247:@\222(\275?\337\326[@9]\256>]\301\212?\262\035\243>\216\020J?\025\234K?,:\377>\311q\032?q\311\317>\032[w\277\313\200\246\275\212[\320?$\266(@M\330 \275\323\323\214>TQ{?\332n=>\024i.\276\344\004\200?\300@>\276\232p?@|A\216?\273\342\327?lrC\277\006\304m\276^#L\277\250/1@\245\242\336>\253\242\032>\315R\375\276\361\224\031?\007\013&>\376\376\315>k\013s\276!\'>@\254W\203>D9-@\3162\221?\014\216\274\276\037_\232?\220\264I?\212u\'\277B\326\211>a!\222>\002c.@\233S%?&\237-\275\254\315\330=8\270<@\250R0?\001+\240?\'\327$?K\010\352>E\357c?x\0300@QT\210?\017\235:@\215\007\026?t\275\250?\246\236\322?k\002?@O!\244?@\220\010?\235\337\205>eK\243?\242Gx\275\014m\211>0\307G\277i52@*\315\266?\271n\312>\347\301X\277\201QG>a\016\227?\337\341\032@\037\0050?\231\351\227=\313\374q\277?\207\330?\343K:?\312K\024@\206Md?.\334 @w\245E?3\255>?\376\356\207\277\244\3061@\226w\324>\321`(@tA\201>\020\206\220>\277\201\263\277@\260\306>kS\205? !\026@]\001\221?\257Y\370\274\034|\305\2764F\234?\275\257#\277\310#\327?\0007W?\343z,>\200=5>\026\235\026@\020\362P?\222\327\031@\217\231\232<n\022\247>\3029$?\013\313\013@G\016\024?\002M\022@r\212\321?\257%=@\224F\214?\304\0231@S:#?\270\2152?\256\233\231\273\026\t\021@\367\035u?\262\005C@.\305w?\004X]?]Jn?\236-Q\277:\303\272\277\255\350@@\334\310\226?\225[\336>\307\365\350\275q\3411@{\022\311?\313\t\006@28\314?\375\245\213?&\371)@\350;I?>)\217\275Z\227\027?v\245\271=\243\237M@\232\2026?\312\2338@\227\366\302=t\375\345\276\000\257\003>\345( >#\010_?\335\005\005=5\327\273?2\212Z>N!\025\276+\373W>Tc\202?\225z3@:M\203?\020H\324\2761\360\244\277\321\3631>^\345\323\276\305C\230>\320\317\230?x!\020?3zV?\336{/@k\006\205?\256 B@\232\247\255?z\267\313?6\272\224\276\362\325)?\244]\246>P\336;@_c\264?\225\324\367?%\232\213?$\256\004@\340\217\004?\033\253+@\255\273\366=XSU\277\202/,? =\007?\030Gf?G\320\342<\244\016\240>\300\375\321?\221n1?a=\020@`\370\243?\341\201\007@\027\355\201?}#.@bp\"?|\'\344\276\000\005\202?;\324@@}\235U?YE\270?\243O\216>6\264\202?\347\354\227=\235O\321>\356\351\361>\232X\347>h\222\253\276\316\0233@\215\215}?\303\222\"@&B\030?4\277_?\331\235\330\2762*\014@\030$\024?\311^\034@\375\030\226?\tUR@\252n\005?\221\307\336?#\035N\276\246>\026@P\301\305>\200\r$?1-\031?Eq\033@\225\343V?\257G0@B*\203\276}\313\270?HTt?N\3578@\177\254\223>v\335E?\231O\230?eV\262?f[\274?\275^:@m8\203?\346\335\362\275\365\255\266\277;!\\>6\350V\277\352\362\006@O8F?O3?>\305~\240>\313\216\336?\340Fe?\350x\242?]L\207?Rm$@\377\226\260=\034\242\023?\262/\246?\212\360\234>\317\242\212\276\313\340#@\223\230g?\315l\345?e\360#?\036\310b\2767\343\346\277\372\344\036@\002?\347>\256L+@,n\211>\256\202\032@\245\310\270>~\232\344\276\252\236+\275jIW?L\330\021?\346B\"@\341M$?\344_(@\020\007\026?>\206\026@x\025\201>\t\353^\277\346\025\332=\216h,@k\220\223?e^\275\276\246y\233?\311Ey?\305\310\312?#\030\346\275\310f=?\354\010h\276\230\022\250\276\360N\r@\232p\"?\'\363\027@i\313R?9+q?\005{]?\032\035\270?\373|\245>5\346*@\257,\323?\017\301&\277\\\260\263\276\274z\362>\264\274\316\276T\2530@g\356\270?\0134N=\305v\004?\002G\255?\307 \315?\274\002<\277\345\006\243\276!\350,@=N\034?\037\231\n@48\261?B\233\337?\214\233p?\002\022\036>?b\351>\203\227*@\375\345(?\351/H@gWz?a\202!>\207\377\255>C\260>@4\373r>\014\323\007@\255c\330?\330\237:@\375\032v?\020\013 @II\006?\307{\213?\334\373\321\276\354%3@\216\266\261?\263{t?,I0?\227j\226?\243{z?\306Q\346?\033\3144>9\340\365>\340\364N?\013\312%@\036\343\\?\260\022+@$\315\302?\233\340\021?\211\221Q?c\005\006@EA\323? ;\032@\032\343\004?\230\301/@@k\200?\014\223R?6!\311>F\360\361<;Z\342?\231\2079@\3247\007?\215\212\214?A\257|?\0256P?fc\334>:\327\023@g\261\320>\247\030\037@\213\237\200?\223\t9>\341I\223=#\331,@nn\245>\016U\013@\'\232\345>\001\265\302?\211\222\216?5)\023@\311\200r?}\347\036@\373\320*?\376Z\337<\346\220+>\210M\274>\244\261R=\025\264\002@lM_?\263#\203?\327\026\200\277\324\236\034@\\\257_?x\313G@\361|.?\211\364\255\276\267[;?\275\030m?g\206\244?pi\365?f\013\361?\334+\204\276\275\340\350>B\370\371\275hF\255?\233ER\277s2\243\277\254S\035@\032Y\236?2ll>\220\217\014\276\373f\222>\270\356\264\277\335\004\374=\364ZO>\253\250$@d\261\367?\224\307\024@H\243\320?\241{\020@\206c\223?\024K\344?\206\007k?\320\242\030@\002N6\276\\\td?\2125\272\276\254\361\337>\003\331I?\r\227\234?\302\204\300>\360\237M@F\263\033?\177\306\n?\2359|>\304e\374?\341\352\303?\215xp?<\325\001@\235\264:@\3072/?=\026\211>\325\263V?\255\201\031@\374\226\r?\353\213\022?\323\276L>\243=\256>\002B;>X\372\037?\376\212k>\277>\267?\376)\347\275\335\353\344=\314\245\002?\272\263`?\261I\216=\233o\247\275\0130j?5\270\001@\363Ot?v\005\010@\227F\203?a\330\202=)?c?\t)\322>\213\327\314?\336\242\026?+\220,\276\227\320\272?kE\255?D\221/@E\272\213?\263\013\'@Y\002\356>I\237\351?\351S\236>\362\2479@.\201\227?\223bk?\371G\277?\373q4?\246U\263\275\247\322\017@H\205\213?\372\014\177?\320C\003@\335\344*@\305j\216??x\251>\212\324R\276\321\357\326>\3324\256>zuC?0mY?]\343%@\247\316\213?)\035\030@)\351\177?\224\220\334\276\024\226\202=\343?\317>\r\203\255\276+\210\t?z\035+?\025\227$@\345^\237?~\037,?\374\277/?\256\017F@$hL?\254+\034@3\357\356?\266\212O@\r\010\232?M\304\005@\373\253K?\022\222\005?\315I|\273\203\237\010?]a\201?\2565\002?c\363\306\276\203F\r@Mh{?\317%\327?d\374i\277\263\033\201\277x\305\200?\006/M?\375\031\r?\364\240\034?m\216u?f\010[?\354\261v?,\376\256\275$\247c=d\033\036@a<#?\2724\260>\205\246\247\276\006\236-\276\001>!\277\376(\035@{G\245>\2502G\277\363\343\326>}7\215?\323\375P?\033O,@W\373\247?D7\034?O\330\317\275|\240J@\005\254\370?\220R1>[}h\276\261C\000@\277\010\317?\340\342\025>\033\337\252>-85@{\225\204?\312\272\201?\303\nj?->0@\241J\246??nM?\030\316l?\255\301\202?\215\234l?\t\000\005@9\275\r?{\264\024@|9\023?3\225\014@\265\224q?\361\027\034?\210\0161\277T\3132?g\222??\325}=\277\251\037\344?)z1@\315R\027?n\234\317\275d\233c>\361\207L@\2100\254?3\2124@\'\345\330>:a\025?\225?\211>\233*\021@$>^?\202\032\027@\3538Z?\320\023\230\277\366G\221?\177h\027@\213\342\211?t\003O>\000\337b\277c\351\212\276\367\215\237\276\376\005\010?\355\265\203?\016\016\370=\240\034\243\277\277^k=P\365\027\276\254\317\025@z\2642=T\341W?\010\245h>\352\305/?\355J\035\277\317p\003@\336\307\014?UX,@\356mZ?\340Z$@\033\230\263?Y\363\006@\373\004h?q\327%@\261\024\330>\263\357a@\320\232\301?\251\271?@_\031\024?)\362\351=ix\002?*\372/@>(\210?/\331\021@\"AC?\240\277\365?\017_??\210\\E@\253\034V?{\002\036@\3429\350=G\304\027?1\220H=\254yo?K\335\204\277\273\035\325>!|\002@|c\033@.a2?\002\352b?\230\014Z\277\271r\225?\254C=\276\n+\233\276\236zY\277\222\335\\@\357\265\021?\334_3@\013\217\324>\235\221Q?l\366`\277=\270%@X\300\276>!H\010@\351\213\004>\310\335\030@\235\017\245?\314\207>>\324\224\372\276\227\244\n@\303\024#?:\332\256?\326\306\235\276\331P0@\261H\350>*\311H?\210&\225=\025UQ>\363?\005@\224\313\362?\372\303\352?\344W\006@\275\367\355=\205\366\023@@\347\200?\005\372\205?(\336\337\277\3607\246>\332\214\251?\331\230\266=\247W\016?7\302\n@b\247\023?{\261\014@\240\374<?m\2458?eT{?\276\003\\?.\341\343>\031\246\372> \3146\277\027\222T\276\357\027\022\277\267\361E?\224\265G>\335\311V\276\362p\311>bN]@\005\375^?\243X3\276\256\002v?YU\221\277i4A?\242h\236?\234\246Y?\232{\207\275\365\322s\277x\344U@4.\030@Rj\020@\303\024\321?\033BO??]\231?\212:\230?\363\033\014\277\304\273\376?\253[L?\365\311,@-:\213?`w\017@\277nQ?\202U<@\250\205~?\005^\027\277\354&\177>\311}\014@\374\205|>\203\263\3039eUv>\242\020\232?\262\272;>\372K1@\317\034\030?\274\316\250?\310\211\352\275\316j\'?\337\273_\277\226#D?\243\3705@}.\013@)\037\265>\017\2158@\034/f?\031B\035@I\227\315?\3307\306>\226\031\211?I\213\373?\360\373\364>\027\266#@\177\267\375<\355\276\345>\'7\252>\321e\204\276\237\225f?k9\"?~\010\201?K|J?7\353}>\337r\004@\345\255\362?\350\375p\276T\217\376\276\336\256\262?\003\331\373?A\357M?\334}}>%\236/@\033\371\236?L\220\300?\375\321\266\2774\234<@\356\t\225?GO\037@\216v4?\334\207\010\27617\335?#\314J@\317-a>\366\335L@\333\235^?\315\\\"@1\004\240>\262\004\032@\0369\376>\311\250\024@\270\303z?AB\363?+\204\214?^U4@\226\226\235>dK\321\276\214\276\302\276\270.\300?[io?\006\375#@\222\217\'?4]{?8\177\320>\376\223\212?\034\303c?\022\220\010@@F\215?\032U*@\225\270J?\375\337\037@\003f[?\224h#?\264\355\210\2764\357\373>\260\256\246?6\252(@\265_\211?U\030I@\376\222\034?\255\322\007?\330u?\277\004\320;@\205,\203?+\301I@\310\314\256?\273q\r@\221\352e?\243\304\016@K\303\304?\352\023(@x\326\252>oj\010?\212\272[\276s\362\004@\337\325\373?\354A0?]G\306?Q\376\037\277\214V\255?\005\332\202?\006ap\277G\177/@\313$8?\257u\r@\227\363x?\362~\241?\022p\360=\3561\370=\032\214\325>\021\0354?\345\216\264\277\2538\352?\352%\223=\375L\210?<V \276h\306:?\206_\321?Z\2431\277\353\020\265\276\363H\357?2[\003@y\342D>-+\005\300\0026\036@\326\214\236?\216c6>\202[\n\277\365]\213\275\324\3762>F;\006@\236\276\327?$W6@\375\303+?\014B\000@\362\272\206?\217a\034@f\251\224?\207\013A?\327\371\205\277\260\2363?](\"?\341\323!@\305\r)?\202\017G@\334\306N?1\341[\277\037\225T\276\224{\317?\226\rd\277HA\035@r\364\031;\260z@@\035tO?\207^\240?\222\344`\277\023\317\032@\303\271H?\265\035j=\231\245a?\321nu?i\017\205>\034AU?\265\355)?\337\023\270\276\'z\226?\006\210\020?\014\3501?u\333\343?\335V\223?4\2420@\356/\256>\035\246\001@B-\371? \376!@\205S\326?O~\r?+\236\233\276fq0@\335\256\306?\210\260$@\205\222\026@^P>\276u\271\321?\221x\261?lx\265>\312=\332?\345\377\033>\204[\234?u\343E?|\036\222?\257\375;\277\022Yf?\361\3373=r\243\000@{\352\n=\303n\025@\360\'\310?\010\264(?\3408\211?\263\345\275?\036]H\277\362\226\035@\211\230A?\247\206\037@V\014o?G\nE@\215\267\246?$\316\032?\313\260\216?\201\340^?\263\003s\276\216u\270?\254\025\314\2744\274\010?z2\262>\"\n5@1,=?\363\003\006\276\313\371!=\363X\005@28\230?#\336t?n\370G>h\273\313?\202\3133?\342\347\003>\003\325\341?\275\321A\277ET\232?\000\340F@\327\333\275?Cu\010?>\357z?\362+%\276\314_\n>\265\2276>\223P\225>:\3111@\244\202@?\301\335\263?\330\220\016\277\355\243-\275?\337c\277\357?\231?\237f\032\277r\202\203?\340\224\241?\344k\305>$[\225=G\322\227\275\313\200\000@\313W\005?UfZ\277Y@,?v\345.\277\330<\202>V\307\343\275\013\276J@po\373>ARA\276\235x\221?{\356\212?\233|\241?A\303.@\272R\324?\250\275\251>\273\0275?\223m%@&O\262>\364C\003?\253\336\023?\305\2423@N.\"\275\364#\013@sxO?\336\232-@<\364m?\357\025\031@\317\233\315?\205\271,@\327j\231?Sk/@k\331j?\037+.@c\312z>\362p9@\034.\367\276\3331\000@\321h8?\275\316c?5=\264?a\203\377>%\251*\276r\202\r@\240v\240?\241\324\213?f;\215>+(\030@!\271\267?\300\006\254?\370\260C\277R\355!@D\334\243?\232\213\017@\274m\005?\005\260\245\275:s\204?\311C\014@\326~\221?\002M\'@\224\312\230?\005\304}?\315\313\020\277\327\373<@\374.!>@\235\355=\331\013\255?M\276\300?\360!\315<\304\3331?\037\347h?:\242\005@~\331\317?\201\234W=K\2033?|\t\267>&\324\364>\221G\327?*\002\036?\264.\333\276 Cd\276\343+$@;\311\276?H&\025@\346\323k?n\250F?\315\201U?U\371/@\377\3641?\3245\240?u\320\375?\302>\357?|{u?\261>!@B4)?\302Y\232\275\372\222>\277\367\233\336?\303^a?&\341\337<),\215\276\3351\245?\2541\237?\267\244\360?!\251\206?\274-\247\275\036\"\201>\014\036=@!J\362>t\037\030@\013oi?\336\217]>\365\'\277?\227\r\205>\247\020|?e\236$@\363Yb?\360\361\014?]\344c<\225\343\013@\013C\327\274\304{\034>\327:.\276\000\210\r@e6\330?\266\211\215?\211\266N\277\371U\255\277\306\210\242\275R\026\377?\032\256\253?k\265h>\332\325\002\277\340\301\221?\22033\277\260\312&?M<\233>\010%\010@\373\254_>\244\321\243?:+\231?m\367\365>B~\'?\241\000\022\275\327\362\231\277\255\372!?lk\r\277s\306\372?\001B,?\212v%@\363\016\350?\337\237F@Q\243;?\365c&@\'\002\327?\351\240\202?\257\267\302>\235g[?Z\337g>g\254f?\260\260\201\276\323\016$@g\364\320>\212\322\031@\376\327r?z\003\n@\013g\376?\332&\260>\030\243b?k\376@=\325\342\016\276\345\3421@$\314\007@z\323\024\276}\336\350>n|\341>Tk#\276K\035\230\276\002\374\025>\001;\t@\003\366\025?[Y\021@x\261C?!\204g?\026\026I?\246PH@\350\233p?\225\233C@K\275\005?\013\350\337\276\201\226\277>\217\255F?+\342t?x\005\025@d\302\000?\223\220\026@\343\253[?\251\203\336\276\255\204E\277\210M\217?&\344\346=\252p\355\275\330\370\353\276\344\025\n@\316\225\007>\366\323\024@\262-\212?\004`1\277\3050\355=\307 \026@\342jm>\207\315P@bD\215?\262=`<f^\335?\021>\002?\265\002\035@\365(\241?\356l\335\277\264\315J@u\265&?\211\2059@\336o\263?\373x*@\357\265\304?\231\372\013@\213sT?NK7\276\272\270\021\276H\021\275?y\266\311?c\276{?o\233\033\277\364\226,@\032\006\033?O>\314>\373[V?}P\'?\363\2351?g8\262?\340\232H\276eB\200?\331J\365>\316\336\017@\262\273\212?U\310+@r\216L?\275\240\007@U\321\274\275\236\265d?Y\324\314>\360L\035@\236\303q?\3136\274<\352\343F\276\375\303%@\273(d?5\320\376?\202\2117?\213\"8@\312\252\363>\336\322\340?\000S2?\247\345\026@\366d\254>\364\241\005@}\340\252?\301\332X@}\312\025?\234\214\027@\232\221d?e-\026@\351\307\253>\263\317\"@\227z\251?\301q\221>\366g>?V!\200>\037u(?T\306\037@\237\370\243>\270<M@\321\313\202?\r\026)@\341\260\231>\340\267+@7\010\277?\342\344)@\031so?}j\275?\355\023\276>\230M\353=C\316\262?\020\004#\277S24?\332=[?-\310\260?\302\203\344\276\373-\323>v,\212>Z\301[>\355\033i?\324\315_\2763\356\356?8A\226?\372\241\357?\237/\370?w\202\360>\374\205`>\375Jr?sJ\233\277\344\026\324>\370\277\203?\316\242o?w]\336\276$\276\210?e\212\202?\340v7@\216\t\262>y\270\027@\364\213\237?\343\273\327>f\251\356>\033\315\322\276\364\377\326\276ZLY?\315\244\332\275\241\243\352\275\253@Y?&\342\326>\357=\202?\327\253\020\274\177\230\335=\365/_?\204\341\022\2773\205\016@*YD?I%,@\002\350\303?5\014O<\321\361\">\276\266\371\276\005\257\233\277^|M>\245e!?N\354\363=,\353F>0\022\020>\3233\"\277\023\225E@:y\207\274`\177\017@^\231\271?*\231\n?I2\">\037\273\350>\240?<\276h?q\276 \332$?\251\234\006@\357\311f?S\265\"@\377\327\255?\323\206\035@M3\033?\342O\'@}_x<\336:\207>\2757V\276\357\010\354?[\326\024?\212m\006@k\330%\275\213\332\337?m\320o?j\327F@;\362\235?\220\364\325?\217\266\371?\331~\006@s\346\345>\377+\'?\030\262U>\376\371{?\032\255\252>\342;\025@^\312\240?\267Nx=8\256\204?\n\"B\276$\306\014?\017\372\026> 4;\276\177+\"@\263\251\\?\025i\031?\264\206#\276\365\317Y>\030\226\267\276\021\210\271=\343D\231\276i6\226?\211\253)?\266\341(@\316m\266?\320;-@\356{\230?5\350\013?\373p\223\277a9\261=\314I~?\035\376\326\276\014x+?9p\216?\321\375\220?\343\024\262?\324\271\352\2768\252,?\204\000\217\276\020\263\244?\235\345\024@z\224\032@\276P\177>\365\240J\277r|\355?\224\325\n@O\371\232?( \252\2766\"M\274\204n\021@z\277\006:>\3103?\216\245\351\276\006\355+?\263\223\263?6\230\020@\360\353\274?2\374\260;\211|\304\277b\210>@z*B?\025\346\034??\3174\276\302&\030@\210\333\210?\0011Y@\256x\001?\275\365\020@\302\373\021?N\3764;\021\375\024?\352\215-?\247\307\242=^\3640@\\\331\242?8\203l?\377\013\001@\n\365\370?%\216\224?H\000\372?\222\267\203?g\030k@\230\rS?(\327\333?X\253\264>\306\314S?\261:\t\277\350\210\254\276\3000P\275\211\\\204=\313\223@?\363Ts?,\240\203>tL\'@\316\350\236?\026,9@\275\314J>\005\020\332?\025\316!?\352\3270?\247d\002@\301\346D@\260\302\356?\232\316M?a\356\224?\2751\022@\026\264R?\313\0248@2\212\310=2\002\030@\232*\034?\375\324\352>\243\363+?\315`&@\333#J?\367w\252=l\036\231\277\273\352E@\342&\023?\'\223\031?D\236A\276\t\211\245\276,\312\316=\r#\010@\'\256\333>\355q\240?\004.\374?{\2078@\251\217^?)$\037@\027Y2?\235\254\216?]\263\023\277\373\034\206?\324\266-\277\306\226\037@B\005\212?zL\201?b\227\375\276\032\242\033@\300\337%>S49@\345\0360?\244(+=\327\336\000?\227\353\027@G\361a?\255\023O\277\276\302W>\037\371\025@\330!/?\'>\202>fb\272>\313\253\225?\332V\030\277\333\224\316?\247\252*?,df?\361\306\324\277\021w:@\202\025\246?p\0139@S\327\212?J\374N@\027\314I?$\306~\276\337\376a?\372\nb?\235\255\"\277BW\334\275gP\215>\240\263\014@\374\271\277?\260\342\026@EB\246>\216\362a?\023\300\032?;z\216=O\340\367\275\27070@A\010\267>\263S\202=+\025\001?\266\316\317?U\020>?\356.\\? \200{?I\026\364?V\307/?\014\374\017?d\331\203\276\200\364\005@\343\355\265=}\227\375>S\027\n\2771\002\323?%\036,>\223\n`\276\254\204,?L\314\226?\360\203e?D\234\317?\214\234\233?\254&\204?\031\343\301>\002kE?4\311{\277\236Y,\277 j\357>\253\031\215=\325\375\233\277\373*\036@\324q\373>G\223<@J\002\234?Dh\213=&\326K\277\264e\'@\265\212\215?\345x\004\276\262\376E?\377\221$@\275\366I?\221\206\000@Y\323\022?\243\261\024@\006\330\204?\245J\001@S\026Y?W \213?j\225\200?\016?%?\321\234\367?EK\276>\024/Y>\326\275,@c\256\234?:\031\337>\026f\300\277\022#\247?PT\354\276\357\204\374?\326\350i?h\023\035@~\2101?\025\311\271>\034\214e\276\236\244\035?]\363(> \365&@\330~\240?\014\224\337>\004\347\260>\005R@@K\206\201?H\276\273?\000\033\333?\324\232\344?Vcn?\270\216\317\276\235[\306>\372\264\266?)\314\031?3z\220?\000\251\014\277.kG@\305\207N>|\022=@\022-\234?uP\311\276\277!\341?(\"\013@S\036\003\276\364*\321?\016\362\330?\310\222:@\302\352=?h\341\036@\365Z0? 5\351?s\273\026?\217\304\t@I\210D?{XA@)X6?VJA@|\202\244?\3702\013@V9\271?le\020@\240M\316?\210*\016@\336\025\361>\016\324\026@V\037\210\276E\355m?\220,\272\276*\177?@\022I\325>\207\236\026@\223\331\270?2|_?%\250\211>\221?\'@q}\214?\033A\227?!\377.?\234\243\032@\344\320\253?\030\355X?\211{\316;\3653\001@\321Fh>\031(\034@\211!E?\314\270\034@\025\n~?\333\032\363?T\031\232?B7;>&\260\230?\370L\352?\336\217\303\276=\306\211=0 R\276\313|-?w\345\311;\223\373\177?\361\314I>-\317#?\315\316\326\276\350\327N@\276S\257?c\274\335\2761\027\352\274\271\242\014@\013\3317?U\326\033@I\305\021?B\312\301>\265\251{=wV\t@\216s\272>C\317:@\340\324\237?\300\341\036@\363@\"?7\321v?9q\220?3\347.@\360\225\013?\344\261\017@\n\320\007?|r5@|\227\305<\320c\037@\177t\032?0N\237\275\236Hr?\273l/@\230\233[\275\237\202\006\277\021\210\306? 2\016@\214\307\224?\341\256\256>}\337\207?\007\220\035@\034\335\221?\215E\'@yb\366>\371\243\"?I$\263>\334\271\031?\246\261\200?7\312*\275\010\341\243<\372f-?\362\360\235>\322a\022?\207K\231?\335E5@\237W\252>!k\026@g\224=?\311C\024@hE\207?T</?\324\226$?\374\326x?\326\364\274>3\276\352?\347\022\252?\346U\014\276\214&\034?{\231\245?p\362\325?\243q\016?G\370\222?\310\013$>\313\203k\276\003\014\261>?\307H\277b\017%@\241\250.?\223\351!@#\210\262<\t\031\255\276:\020 ?\257\2606@M\202G?\214>\352?$\270\225?\336r\027@\350\353y?\226\211\002@\264\240a?d\256\205?\324)\212?\017t\026@\361\201\217?v\223\014@\355\201\022?\332*/\275\325\215B?AP,@\034\236F?\206;b?m/\t@H\004\021@l\025^?\336,!@5\360\030@\3616\017@um\254=d\001\\>\206\262|?\272#\005?k\262\241>l3+@\216\021\207\276&\272\037?\214\317\355?:p\030@;\270\255?\035\2335@7w5?\n\005(@/\350C?\214rz?\327`\251=!\234\025@t\371\361\274\335\221\017@#\307\006@d\204\r@\002x&?\335o\313>.\212\250\276\032\351H?\227\241\250?3+*@\336)\267?h\273\252?[\271 >t\342\376<\241\261\352=qj#@\227\376\350?\260\246\014@\263\314\250?\264\271n?\344\271Q?\242n\367=\227\344\203?\245\352 @$$\002?r\325\005@\3774g?\000\324\032\277\225\210\316>\213\227(@\221Ll?\215\272D?}6\324\276\371(G>\036\216+?E\3113@~\177\213?\323+M?\370.~\275\231\324\376?\335i2?`\220\340\276o\215d\277\231\354\177?t!\030\277\033.%\276\224\270Y?\307\337\221\276\313\255\277=&\225.@\373\220_?\035\3129@ R-?G\302\214>\"\241\317>\225K\002@<Vm?\203\351\272>\310\022\322?\276c\005@\006\2055>\270\320#>\005[\244\276(k\021\276^\236\'@w\353L@qr\234?\313\207X?\336\220C?\253\363\377>\240\311\315\276\225CD>\034\201\010\275\3004#?Wt\001\277\321\214\273?\037\202\263\276r?2@\230\307\326>\217FK?D\264\260>6X\005?K\276\026@E{\004?;\027\201\277l\335\036@-\317\224? \377\014@\377\206$?F\253+@\256\207|?\234\372\001@@4\263?F\324\324>\313\302\375>\222tr?\250Y\267\276\341.o>-s\033?\361\030\367?&H\234?\330n.@\333\346P?\217>\226?o\321\234>C\366Y?\277\205\215?B\336\314=\232\246\237\276*U\374?\3002I?\022\010\220?*\374u?\342),@\361\266\334>#\030\366\275v\311-?*B\025@\030\347/>\203\373K?Z\3473\277\201\342\020?\317A\226\277\006\037\203?<\365n?\302\277\000@\312\024\273\274R\210!@K\371\310>o\231-@\\z\016?"
          }
        }
      }
    }
    node {
      name: "RandomShuffle"
      op: "RandomShuffle"
      input: "Const"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "seed"
        value {
          i: 0
        }
      }
      attr {
        key: "seed2"
        value {
          i: 0
        }
      }
    }
    node {
      name: "Slice/begin"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\000\000\000\000\000\000\000"
          }
        }
      }
    }
    node {
      name: "Slice/size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\003\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "Slice"
      op: "Slice"
      input: "RandomShuffle"
      input: "Slice/begin"
      input: "Slice/size"
      attr {
        key: "Index"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "model"
      op: "VariableV2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "container"
        value {
          s: ""
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 3
            }
            dim {
              size: 2
            }
          }
        }
      }
      attr {
        key: "shared_name"
        value {
          s: ""
        }
      }
    }
    node {
      name: "model/Assign"
      op: "Assign"
      input: "model"
      input: "Slice"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@model"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "model/read"
      op: "Identity"
      input: "model"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@model"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "ExpandDims/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ExpandDims"
      op: "ExpandDims"
      input: "Const"
      input: "ExpandDims/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "ExpandDims_1/dim"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "ExpandDims_1"
      op: "ExpandDims"
      input: "model/read"
      input: "ExpandDims_1/dim"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tdim"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Sub"
      op: "Sub"
      input: "ExpandDims"
      input: "ExpandDims_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Square"
      op: "Square"
      input: "Sub"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 1000
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Sum/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
    }
    node {
      name: "Sum"
      op: "Sum"
      input: "Square"
      input: "Sum/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 1000
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "ArgMin/dimension"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ArgMin"
      op: "ArgMin"
      input: "Sum"
      input: "ArgMin/dimension"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
            }
          }
        }
      }
      attr {
        key: "output_type"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 0
          }
        }
      }
    }
    node {
      name: "Equal"
      op: "Equal"
      input: "ArgMin"
      input: "Equal/y"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
            }
          }
        }
      }
    }
    node {
      name: "Where"
      op: "Where"
      input: "Equal"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "Reshape"
      op: "Reshape"
      input: "Where"
      input: "Reshape/shape"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Gather"
      op: "Gather"
      input: "Const"
      input: "Reshape"
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "Mean/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Mean"
      op: "Mean"
      input: "Gather"
      input: "Mean/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "Equal_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 1
          }
        }
      }
    }
    node {
      name: "Equal_1"
      op: "Equal"
      input: "ArgMin"
      input: "Equal_1/y"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
            }
          }
        }
      }
    }
    node {
      name: "Where_1"
      op: "Where"
      input: "Equal_1"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "Reshape_1"
      op: "Reshape"
      input: "Where_1"
      input: "Reshape_1/shape"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Gather_1"
      op: "Gather"
      input: "Const"
      input: "Reshape_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "Mean_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Mean_1"
      op: "Mean"
      input: "Gather_1"
      input: "Mean_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "Equal_2/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 2
          }
        }
      }
    }
    node {
      name: "Equal_2"
      op: "Equal"
      input: "ArgMin"
      input: "Equal_2/y"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1000
              }
            }
          }
        }
      }
    }
    node {
      name: "Where_2"
      op: "Where"
      input: "Equal_2"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
    }
    node {
      name: "Reshape_2/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\001\000\000\000\377\377\377\377"
          }
        }
      }
    }
    node {
      name: "Reshape_2"
      op: "Reshape"
      input: "Where_2"
      input: "Reshape_2/shape"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
    }
    node {
      name: "Gather_2"
      op: "Gather"
      input: "Const"
      input: "Reshape_2"
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: -1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "Mean_2/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Mean_2"
      op: "Mean"
      input: "Gather_2"
      input: "Mean_2/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "concat/axis"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "concat"
      op: "ConcatV2"
      input: "Mean"
      input: "Mean_1"
      input: "Mean_2"
      input: "concat/axis"
      attr {
        key: "N"
        value {
          i: 3
        }
      }
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Assign"
      op: "Assign"
      input: "model"
      input: "concat"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@model"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "init"
      op: "NoOp"
      input: "^model/Assign"
    }
    node {
      name: "input"
      op: "Placeholder"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "shape"
        value {
          shape {
            dim {
              size: 2
            }
          }
        }
      }
    }
    node {
      name: "Sub_1"
      op: "Sub"
      input: "model/read"
      input: "input"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Square_1"
      op: "Square"
      input: "Sub_1"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "Sum_1/reduction_indices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "Sum_1"
      op: "Sum"
      input: "Square_1"
      input: "Sum_1/reduction_indices"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
            }
          }
        }
      }
      attr {
        key: "keep_dims"
        value {
          b: false
        }
      }
    }
    node {
      name: "ArgMin_1/dimension"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "ArgMin_1"
      op: "ArgMin"
      input: "Sum_1"
      input: "ArgMin_1/dimension"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "Tidx"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_type"
        value {
          type: DT_INT64
        }
      }
    }
    node {
      name: "Gather_3"
      op: "Gather"
      input: "model/read"
      input: "ArgMin_1"
      attr {
        key: "Tindices"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tparams"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "validate_indices"
        value {
          b: true
        }
      }
    }
    node {
      name: "output"
      op: "Identity"
      input: "Gather_3"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
    }
    node {
      name: "save/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/StringJoin/inputs_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "_temp_c1af72925e454979930bcdb3b811ee75/part"
          }
        }
      }
    }
    node {
      name: "save/StringJoin"
      op: "StringJoin"
      input: "save/Const"
      input: "save/StringJoin/inputs_1"
      attr {
        key: "N"
        value {
          i: 2
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "separator"
        value {
          s: ""
        }
      }
    }
    node {
      name: "save/num_shards"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename/shard"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
    }
    node {
      name: "save/ShardedFilename"
      op: "ShardedFilename"
      input: "save/StringJoin"
      input: "save/ShardedFilename/shard"
      input: "save/num_shards"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/SaveV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/SaveV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/SaveV2"
      op: "SaveV2"
      input: "save/ShardedFilename"
      input: "save/SaveV2/tensor_names"
      input: "save/SaveV2/shape_and_slices"
      input: "model"
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/control_dependency"
      op: "Identity"
      input: "save/ShardedFilename"
      input: "^save/SaveV2"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@save/ShardedFilename"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints/checkpoint_prefixes"
      op: "Pack"
      input: "save/ShardedFilename"
      input: "^save/control_dependency"
      attr {
        key: "N"
        value {
          i: 1
        }
      }
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "axis"
        value {
          i: 0
        }
      }
    }
    node {
      name: "save/MergeV2Checkpoints"
      op: "MergeV2Checkpoints"
      input: "save/MergeV2Checkpoints/checkpoint_prefixes"
      input: "save/Const"
      attr {
        key: "delete_old_dirs"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/Identity"
      op: "Identity"
      input: "save/Const"
      input: "^save/control_dependency"
      input: "^save/MergeV2Checkpoints"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/tensor_names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: "model"
          }
        }
      }
    }
    node {
      name: "save/RestoreV2/shape_and_slices"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 1
              }
            }
            string_val: ""
          }
        }
      }
    }
    node {
      name: "save/RestoreV2"
      op: "RestoreV2"
      input: "save/Const"
      input: "save/RestoreV2/tensor_names"
      input: "save/RestoreV2/shape_and_slices"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "dtypes"
        value {
          list {
            type: DT_FLOAT
          }
        }
      }
    }
    node {
      name: "save/Assign"
      op: "Assign"
      input: "model"
      input: "save/RestoreV2"
      attr {
        key: "T"
        value {
          type: DT_FLOAT
        }
      }
      attr {
        key: "_class"
        value {
          list {
            s: "loc:@model"
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 3
              }
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "use_locking"
        value {
          b: true
        }
      }
      attr {
        key: "validate_shape"
        value {
          b: true
        }
      }
    }
    node {
      name: "save/restore_shard"
      op: "NoOp"
      input: "^save/Assign"
    }
    node {
      name: "save/restore_all"
      op: "NoOp"
      input: "^save/restore_shard"
    }
    versions {
      producer: 24
    }
  }
  saver_def {
    filename_tensor_name: "save/Const:0"
    save_tensor_name: "save/Identity:0"
    restore_op_name: "save/restore_all"
    max_to_keep: 5
    sharded: true
    keep_checkpoint_every_n_hours: 10000.0
    version: V2
  }
  collection_def {
    key: "trainable_variables"
    value {
      bytes_list {
        value: "\n\007model:0\022\014model/Assign\032\014model/read:0"
      }
    }
  }
  collection_def {
    key: "variables"
    value {
      bytes_list {
        value: "\n\007model:0\022\014model/Assign\032\014model/read:0"
      }
    }
  }
  signature_def {
    key: "serving_default"
    value {
      inputs {
        key: "inputPoint"
        value {
          name: "input:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 2
            }
          }
        }
      }
      outputs {
        key: "outputPoint"
        value {
          name: "output:0"
          dtype: DT_FLOAT
          tensor_shape {
            dim {
              size: 2
            }
          }
        }
      }
      method_name: "tensorflow/serving/predict"
    }
  }
}
